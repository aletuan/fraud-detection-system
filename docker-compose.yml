version: '3.8'

services:
  transaction-service:
    build:
      context: ./services/transaction-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - MONGO_URI=mongodb://mongodb:27017
      - DB_NAME=transaction_db
      - PORT=8080
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_TOPIC=transactions
      - LOG_LEVEL=INFO
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      logstash:
        condition: service_healthy
    networks:
      - transaction-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  fraud-detection:
    build:
      context: ./services/fraud-detection
      dockerfile: Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_CONSUMER_GROUP=fraud-detection-group
      - KAFKA_TRANSACTION_TOPIC=transactions
      - KAFKA_DLQ_TOPIC=fraud.detection.dlq
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    depends_on:
      kafka:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - transaction-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - transaction-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - transaction-network
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - transaction-network
    healthcheck:
      test: kafka-topics --bootstrap-server=localhost:9092 --list || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - transaction-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - transaction-network
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - transaction-network
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.2
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - transaction-network
    healthcheck:
      test: curl -s http://localhost:5601/api/status || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  logstash:
    build:
      context: ./services/logstash
      dockerfile: Dockerfile
    volumes:
      - ./config/logstash:/usr/share/logstash/pipeline:ro
      - logs_data:/logs
    ports:
      - "5044:5044"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
      - TZ=Asia/Ho_Chi_Minh
    user: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - transaction-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  transaction-network:
    driver: bridge
volumes:
  mongodb_data:
  logs_data:
